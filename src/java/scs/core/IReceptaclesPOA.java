package scs.core;


/**
* scs/core/IReceptaclesPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from ../../idl/scs.idl
* Friday, December 12, 2008 6:43:10 PM BRST
*/

public abstract class IReceptaclesPOA extends org.omg.PortableServer.Servant
 implements scs.core.IReceptaclesOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("connect", new java.lang.Integer (0));
    _methods.put ("disconnect", new java.lang.Integer (1));
    _methods.put ("getConnections", new java.lang.Integer (2));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // scs/core/IReceptacles/connect
       {
         try {
           String receptacle = in.read_string ();
           org.omg.CORBA.Object obj = org.omg.CORBA.ObjectHelper.read (in);
           int $result = (int)0;
           $result = this.connect (receptacle, obj);
           out = $rh.createReply();
           out.write_ulong ($result);
         } catch (scs.core.InvalidName $ex) {
           out = $rh.createExceptionReply ();
           scs.core.InvalidNameHelper.write (out, $ex);
         } catch (scs.core.InvalidConnection $ex) {
           out = $rh.createExceptionReply ();
           scs.core.InvalidConnectionHelper.write (out, $ex);
         } catch (scs.core.AlreadyConnected $ex) {
           out = $rh.createExceptionReply ();
           scs.core.AlreadyConnectedHelper.write (out, $ex);
         } catch (scs.core.ExceededConnectionLimit $ex) {
           out = $rh.createExceptionReply ();
           scs.core.ExceededConnectionLimitHelper.write (out, $ex);
         }
         break;
       }

       case 1:  // scs/core/IReceptacles/disconnect
       {
         try {
           int id = scs.core.ConnectionIdHelper.read (in);
           this.disconnect (id);
           out = $rh.createReply();
         } catch (scs.core.InvalidConnection $ex) {
           out = $rh.createExceptionReply ();
           scs.core.InvalidConnectionHelper.write (out, $ex);
         } catch (scs.core.NoConnection $ex) {
           out = $rh.createExceptionReply ();
           scs.core.NoConnectionHelper.write (out, $ex);
         }
         break;
       }

       case 2:  // scs/core/IReceptacles/getConnections
       {
         try {
           String receptacle = in.read_string ();
           scs.core.ConnectionDescription $result[] = null;
           $result = this.getConnections (receptacle);
           out = $rh.createReply();
           scs.core.ConnectionDescriptionsHelper.write (out, $result);
         } catch (scs.core.InvalidName $ex) {
           out = $rh.createExceptionReply ();
           scs.core.InvalidNameHelper.write (out, $ex);
         }
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:scs/core/IReceptacles:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public IReceptacles _this() 
  {
    return IReceptaclesHelper.narrow(
    super._this_object());
  }

  public IReceptacles _this(org.omg.CORBA.ORB orb) 
  {
    return IReceptaclesHelper.narrow(
    super._this_object(orb));
  }


} // class IReceptaclesPOA
