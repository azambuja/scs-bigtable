package scs.container;


/**
* scs/container/ComponentInterceptionPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from ../../idl/deployment.idl
* Wednesday, December 10, 2008 9:40:11 AM BRST
*/

public abstract class ComponentInterceptionPOA extends org.omg.PortableServer.Servant
 implements scs.container.ComponentInterceptionOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("loadInterceptor", new java.lang.Integer (0));
    _methods.put ("unloadInterceptor", new java.lang.Integer (1));
    _methods.put ("changePosition", new java.lang.Integer (2));
    _methods.put ("getInterceptorPosition", new java.lang.Integer (3));
    _methods.put ("getClientInterceptorsOrder", new java.lang.Integer (4));
    _methods.put ("getServerInterceptorsOrder", new java.lang.Integer (5));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  // The same goes for positions above the list's current size.
       case 0:  // scs/container/ComponentInterception/loadInterceptor
       {
         try {
           scs.core.ComponentId id = scs.core.ComponentIdHelper.read (in);
           String args[] = scs.container.StringSeqHelper.read (in);
           int position = in.read_ulong ();
           String type = in.read_string ();
           scs.container.ComponentHandle $result = null;
           $result = this.loadInterceptor (id, args, position, type);
           out = $rh.createReply();
           scs.container.ComponentHandleHelper.write (out, $result);
         } catch (scs.container.ListLockFail $ex) {
           out = $rh.createExceptionReply ();
           scs.container.ListLockFailHelper.write (out, $ex);
         } catch (scs.container.ComponentNotFound $ex) {
           out = $rh.createExceptionReply ();
           scs.container.ComponentNotFoundHelper.write (out, $ex);
         } catch (scs.container.ComponentAlreadyLoaded $ex) {
           out = $rh.createExceptionReply ();
           scs.container.ComponentAlreadyLoadedHelper.write (out, $ex);
         } catch (scs.container.LoadFailure $ex) {
           out = $rh.createExceptionReply ();
           scs.container.LoadFailureHelper.write (out, $ex);
         }
         break;
       }

       case 1:  // scs/container/ComponentInterception/unloadInterceptor
       {
         try {
           scs.container.ComponentHandle handle = scs.container.ComponentHandleHelper.read (in);
           this.unloadInterceptor (handle);
           out = $rh.createReply();
         } catch (scs.container.InterceptorNotInstalled $ex) {
           out = $rh.createExceptionReply ();
           scs.container.InterceptorNotInstalledHelper.write (out, $ex);
         } catch (scs.container.ListLockFail $ex) {
           out = $rh.createExceptionReply ();
           scs.container.ListLockFailHelper.write (out, $ex);
         } catch (scs.container.ComponentNotFound $ex) {
           out = $rh.createExceptionReply ();
           scs.container.ComponentNotFoundHelper.write (out, $ex);
         }
         break;
       }

       case 2:  // scs/container/ComponentInterception/changePosition
       {
         try {
           int instance_id = in.read_ulong ();
           int position = in.read_ulong ();
           this.changePosition (instance_id, position);
           out = $rh.createReply();
         } catch (scs.container.InterceptorNotInstalled $ex) {
           out = $rh.createExceptionReply ();
           scs.container.InterceptorNotInstalledHelper.write (out, $ex);
         } catch (scs.container.ListLockFail $ex) {
           out = $rh.createExceptionReply ();
           scs.container.ListLockFailHelper.write (out, $ex);
         } catch (scs.container.ComponentNotFound $ex) {
           out = $rh.createExceptionReply ();
           scs.container.ComponentNotFoundHelper.write (out, $ex);
         }
         break;
       }

       case 3:  // scs/container/ComponentInterception/getInterceptorPosition
       {
         try {
           int instance_id = in.read_ulong ();
           int $result = (int)0;
           $result = this.getInterceptorPosition (instance_id);
           out = $rh.createReply();
           out.write_ulong ($result);
         } catch (scs.container.InterceptorNotInstalled $ex) {
           out = $rh.createExceptionReply ();
           scs.container.InterceptorNotInstalledHelper.write (out, $ex);
         } catch (scs.container.ListLockFail $ex) {
           out = $rh.createExceptionReply ();
           scs.container.ListLockFailHelper.write (out, $ex);
         } catch (scs.container.ComponentNotFound $ex) {
           out = $rh.createExceptionReply ();
           scs.container.ComponentNotFoundHelper.write (out, $ex);
         }
         break;
       }

       case 4:  // scs/container/ComponentInterception/getClientInterceptorsOrder
       {
         int $result[] = null;
         $result = this.getClientInterceptorsOrder ();
         out = $rh.createReply();
         scs.container.InterceptorIdsHelper.write (out, $result);
         break;
       }

       case 5:  // scs/container/ComponentInterception/getServerInterceptorsOrder
       {
         int $result[] = null;
         $result = this.getServerInterceptorsOrder ();
         out = $rh.createReply();
         scs.container.InterceptorIdsHelper.write (out, $result);
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:scs/container/ComponentInterception:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public ComponentInterception _this() 
  {
    return ComponentInterceptionHelper.narrow(
    super._this_object());
  }

  public ComponentInterception _this(org.omg.CORBA.ORB orb) 
  {
    return ComponentInterceptionHelper.narrow(
    super._this_object(orb));
  }


} // class ComponentInterceptionPOA
