package scs.reasoning;


/**
* scs/reasoning/MonitorPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from ../../idl/reasoning.idl
* Friday, December 12, 2008 6:43:13 PM BRST
*/

public abstract class MonitorPOA extends org.omg.PortableServer.Servant
 implements scs.reasoning.MonitorOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("prepareToDataCollection", new java.lang.Integer (0));
    _methods.put ("startDataCollection", new java.lang.Integer (1));
    _methods.put ("finishDataCollection", new java.lang.Integer (2));
    _methods.put ("getSystemState", new java.lang.Integer (3));
    _methods.put ("ping", new java.lang.Integer (4));
    _methods.put ("getNode", new java.lang.Integer (5));
    _methods.put ("setNode", new java.lang.Integer (6));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // scs/reasoning/Monitor/prepareToDataCollection
       {
         scs.reasoning.DataCollectionProperty props = scs.reasoning.DataCollectionPropertyHelper.read (in);
         boolean $result = false;
         $result = this.prepareToDataCollection (props);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 1:  // scs/reasoning/Monitor/startDataCollection
       {
         this.startDataCollection ();
         out = $rh.createReply();
         break;
       }

       case 2:  // scs/reasoning/Monitor/finishDataCollection
       {
         this.finishDataCollection ();
         out = $rh.createReply();
         break;
       }

       case 3:  // scs/reasoning/Monitor/getSystemState
       {
         String $result = null;
         $result = this.getSystemState ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 4:  // scs/reasoning/Monitor/ping
       {
         boolean $result = false;
         $result = this.ping ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 5:  // scs/reasoning/Monitor/getNode
       {
         String $result = null;
         $result = this.getNode ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 6:  // scs/reasoning/Monitor/setNode
       {
         String name = in.read_string ();
         this.setNode (name);
         out = $rh.createReply();
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:scs/reasoning/Monitor:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public Monitor _this() 
  {
    return MonitorHelper.narrow(
    super._this_object());
  }

  public Monitor _this(org.omg.CORBA.ORB orb) 
  {
    return MonitorHelper.narrow(
    super._this_object(orb));
  }


} // class MonitorPOA
